


<div class="runnable-example"
    ng-controller="RunnableExampleController as exCtrl"

    
    ng-init="exCtrl.setDefaultExample('html');"
    >
  
  

  

  

  
  <div class="runnable-example-html" ng-show="exCtrl.showExample == 'html'">
      <pre><code class="hljs html">
    <body class="grid-frame grid-vertical-xl-down">
      <div class="grid-block-md-down">
        <div class="grid-content grid-shrink-sm-only">
        ...
        </div>
      </div>
    </body>
  </code></pre>
  </div>
  
  

</div>


ml'">
      <pre><code class="hljs html">
    <!-- Define Custom width -->
    <div class="grid-block">
      <!-- Will be the width of the child menu -->
      <div class="grid-block grid-shrink">
          <ul id="sideNav" class="menu"> ... </ul>
      </div>

      <!-- Will expand to fill remaining width -->
      <div class="grid-content"> ... </div>
    </div>

    <!-- Define custom height -->
    <div class="grid-block grid-vertical">
      <!-- Will be a height of 200px -->
      <div id="topRow" class="grid-content grid-shrink"> ... </div>

      <!-- Will expand to fill remaining height -->
      <div class="grid-block"> ... </div>
    </div>
  </code></pre>
  </div>
  
  

</div>


te();
       
          // Public Functions
          function cancel(){
              //Close the form modal / view or clear out values to signify a form reset / cancel.
          }
       
          function submit(){
              // First we check the form to ensure that it is valid.
              if( !ctrl.myForm.$invalid ){
                  // Form is valid. Do something with the data. As part of a successful submit, 
                  //we'll also typically switch to a new view, or close the modal that was containing the form.
                  console.log('form valid. submitting.');
              } else {
                  // Form is invalid. All relevant error messages will now be showing in the form.
                  console.log('form invalid');
              }
          }
        
          // Private Functions
          // Activate the controller. Initialize form values. In this example demonstrate setting them as 
          // undefined, hard coded values, or values pulled from a service.
          function activate(){
              //Hard coded initial value
              ctrl.textField = "ABC123";
              ctrl.checkboxFlag = true;
              //Undefined
              ctrl.option = undefined;
              ctrl.select = ctrl.arrayOfOptions[0];
          }
       }
  </code></pre>
  </div>
  

  

  
  <div class="runnable-example-html" ng-show="exCtrl.showExample == 'html'">
      <pre><code class="hljs html">
    <div ng-controller="FormExCtrl as ctrl">
      <form name="ctrl.myForm" class="form" novalidate>
          <!-- Form titles / headings should be styled with the "form-heading" class. -->
          <h2 class="form-heading">Contact Info</h2>
          <!-- A text field, labeled "Required Text Field" and bound to the scope property ctrl.textField2".
          This field is marked as required and has a pattern defined. Valid values would be ABC123, XYZ789, etc. -->
          <blt-textfield data-name="textfield"
                         data-required="true"
                         data-pattern="[A-Z]{3}[0-9]{3}"
                         data-label="Required Text Field"
                         data-model="ctrl.textField">
          </blt-textfield>

          <!-- Adds a border between form controls. -->
          <hr class="form-divider">
          <!-- A simple checkbox bound to ctrl.checkboxFlag with the label of "Checkbox". -->
          <blt-checkbox-radio data-name="checkbox"
                              data-label="Checkbox"
                              data-model="ctrl.checkboxFlag">
          </blt-checkbox-radio>

          <!-- Use form-heading to divide groups of controls -->
          <h2 class="form-heading">Select an option</h2>

          <!-- A group of three radio boxes, presented in a horizontal row. -->
          <div class="form-row">
              <blt-checkbox-radio data-name="option1"
                                  data-label="Option 1"
                                  data-model="ctrl.option"
                                  data-type="radio"
                                  data-value="option1"
                                  data-required="true">
              </blt-checkbox-radio>

              <!-- Adds a border between form controls. -->
              <div class="form-divider-vertical"></div>

              <blt-checkbox-radio data-name="option2"
                                  data-label="Option 2"
                                  data-model="ctrl.option"
                                  data-type="radio"
                                  data-value="option2"
                                  data-required="true">
              </blt-checkbox-radio>

              <!-- Adds a border between form controls. -->
              <div class="form-divider-vertical"></div>

              <blt-checkbox-radio data-name="option3"
                                  data-label="Option 3"
                                  data-model="ctrl.option"
                                  data-type="radio"
                                  data-value="option3"
                                  data-required="true">
              </blt-checkbox-radio>
          </div>

          <!-- Use form-heading to divide groups of controls -->
          <h2 class="form-heading">Category</h2>

          <!-- Standard select dropdown. The user will be presented with the options contained in the arrayOfOptions. -->
          <blt-dropdown data-type="select"
                        data-name="dropdown"
                        data-label="Select a Value"
                        data-options="ctrl.arrayOfOptions"
                        data-model="ctrl.select">
          </blt-dropdown>

          <!-- Creates a section of padding between form contents and button row. -->
          <div class="form-spacer"></div>

          <!-- Cancel and Submit buttons at bottom, right-justified. -->
          <div class="btn-row">
             <button type="button" class="btn-solid" ng-click="ctrl.cancel()">Cancel</button>
             <button type="submit" class="btn-solid-submit" ng-click="ctrl.submit()">Submit</button>
          </div>
      </form>
    </div>
  </code></pre>
  </div>
  
  <div class="runnable-example-demo" ng-show="exCtrl.showExample == 'demo'">
    
    <div ng-controller="FormExCtrl as ctrl">
      <form name="ctrl.myForm" class="form" novalidate>
          <!-- Form titles / headings should be styled with the "form-heading" class. -->
          <h2 class="form-heading">Contact Info</h2>
          <!-- A text field, labeled "Required Text Field" and bound to the scope property ctrl.textField2".
          This field is marked as required and has a pattern defined. Valid values would be ABC123, XYZ789, etc. -->
          <blt-textfield data-name="textfield"
                         data-required="true"
                         data-pattern="[A-Z]{3}[0-9]{3}"
                         data-label="Required Text Field"
                         data-model="ctrl.textField">
          </blt-textfield>

          <!-- Adds a border between form controls. -->
          <hr class="form-divider">
          <!-- A simple checkbox bound to ctrl.checkboxFlag with the label of "Checkbox". -->
          <blt-checkbox-radio data-name="checkbox"
                              data-label="Checkbox"
                              data-model="ctrl.checkboxFlag">
          </blt-checkbox-radio>

          <!-- Use form-heading to divide groups of controls -->
          <h2 class="form-heading">Select an option</h2>

          <!-- A group of three radio boxes, presented in a horizontal row. -->
          <div class="form-row">
              <blt-checkbox-radio data-name="option1"
                                  data-label="Option 1"
                                  data-model="ctrl.option"
                                  data-type="radio"
                                  data-value="option1"
                                  data-required="true">
              </blt-checkbox-radio>

              <!-- Adds a border between form controls. -->
              <div class="form-divider-vertical"></div>

              <blt-checkbox-radio data-name="option2"
                                  data-label="Option 2"
                                  data-model="ctrl.option"
                                  data-type="radio"
                                  data-value="option2"
                                  data-required="true">
              </blt-checkbox-radio>

              <!-- Adds a border between form controls. -->
              <div class="form-divider-vertical"></div>

              <blt-checkbox-radio data-name="option3"
                                  data-label="Option 3"
                                  data-model="ctrl.option"
                                  data-type="radio"
                                  data-value="option3"
                                  data-required="true">
              </blt-checkbox-radio>
          </div>

          <!-- Use form-heading to divide groups of controls -->
          <h2 class="form-heading">Category</h2>

          <!-- Standard select dropdown. The user will be presented with the options contained in the arrayOfOptions. -->
          <blt-dropdown data-type="select"
                        data-name="dropdown"
                        data-label="Select a Value"
                        data-options="ctrl.arrayOfOptions"
                        data-model="ctrl.select">
          </blt-dropdown>

          <!-- Creates a section of padding between form contents and button row. -->
          <div class="form-spacer"></div>

          <!-- Cancel and Submit buttons at bottom, right-justified. -->
          <div class="btn-row">
             <button type="button" class="btn-solid" ng-click="ctrl.cancel()">Cancel</button>
             <button type="submit" class="btn-solid-submit" ng-click="ctrl.submit()">Submit</button>
          </div>
      </form>
    </div>
  
  </div>
  
  

</div>


